{"ast":null,"code":"import _toConsumableArray from \"/Users/iuliia/Desktop/React_projects/react-hooks-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/iuliia/Desktop/React_projects/react-hooks-todo/src/index.js\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Typography from '@material-ui/core/Typography';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\nimport useTodoState from './useTodoState';\nimport './styles.css';\nx;\n\nvar App = function App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, \"Todos\"), /*#__PURE__*/React.createElement(TodoForm, {\n    saveTodo: function saveTodo(todoText) {\n      var trimmedText = todoText.trim();\n\n      if (trimmedText.length > 0) {\n        setTodos([].concat(_toConsumableArray(todos), [trimmedText]));\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TodoList, {\n    todos: todos,\n    deleteTodo: function deleteTodo(todoIndex) {\n      var newTodos = todos.filter(function (_, index) {\n        return index !== todoIndex;\n      });\n      setTodos(newTodos);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 1\n    }\n  }));\n};\n\nvar rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["/Users/iuliia/Desktop/React_projects/react-hooks-todo/src/index.js"],"names":["React","ReactDOM","Typography","TodoForm","TodoList","useTodoState","x","App","todoText","trimmedText","trim","length","setTodos","todos","todoIndex","newTodos","filter","_","index","rootElement","document","getElementById","render"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,cAAP;AAAsBC,CAAC;;AAEvB,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,IAAtB;AAA2B,IAAA,OAAO,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAKE,oBAAC,QAAD;AACJ,IAAA,QAAQ,EAAE,kBAACC,QAAD,EAAc;AACtB,UAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAT,EAApB;;AAEA,UAAID,WAAW,CAACE,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BC,QAAAA,QAAQ,8BAAKC,KAAL,IAAYJ,WAAZ,GAAR;AACD;AACF,KAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAcJ,oBAAC,QAAD;AACE,IAAA,KAAK,EAAEI,KADT;AAEE,IAAA,UAAU,EAAE,oBAACC,SAAD,EAAe;AACzB,UAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa,UAACC,CAAD,EAAIC,KAAJ;AAAA,eAAcA,KAAK,KAAKJ,SAAxB;AAAA,OAAb,CAAjB;AAEAF,MAAAA,QAAQ,CAACG,QAAD,CAAR;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdI,CADF;AA0BD,CA3BD;;AA4BA,IAAMI,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACApB,QAAQ,CAACqB,MAAT,eAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBH,WAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Typography from '@material-ui/core/Typography';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\nimport useTodoState from './useTodoState';\nimport './styles.css';x\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Typography component=\"h1\" variant=\"h2\">\n        Todos\n      </Typography>\n\n      <TodoForm\n  saveTodo={(todoText) => {\n    const trimmedText = todoText.trim();\n\n    if (trimmedText.length > 0) {\n      setTodos([...todos, trimmedText]);\n    }\n  }}\n/>\n<TodoList\n  todos={todos}\n  deleteTodo={(todoIndex) => {\n    const newTodos = todos.filter((_, index) => index !== todoIndex);\n\n    setTodos(newTodos);\n  }}\n/>\n\n    </div>\n  );\n};\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}